/*
 * ClassWriter - A minimal Java bytecode writer. Creates classes, methods, interfaces...
 *     Copyright (C) 2018 J. FÃ©rard <https://github.com/jferard>
 *
 * This file is part of ClassWriter.
 *
 * ClassWriter is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ClassWriter is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.github.jferard.classwriter.api;

import com.github.jferard.classwriter.decoded.Decoded;
import com.github.jferard.classwriter.Writable;
import com.github.jferard.classwriter.encoded.EncodedFields;
import com.github.jferard.classwriter.encoded.EncodedMethods;
import com.github.jferard.classwriter.pool.ConstantPool;
import com.github.jferard.classwriter.pool.ConstantPoolWritableFactory;
import com.github.jferard.classwriter.pool.DecodedConstantPoolWritableFactory;
import com.github.jferard.classwriter.decoded.DecodedClassFile;
import com.github.jferard.classwriter.tool.decoder.EncodedInterfaces;

import java.io.Writer;
import java.util.List;

public class DecoderClassWritableFactory implements ClassWritableFactory<Writer> {
    public static DecoderClassWritableFactory create() {
        return new DecoderClassWritableFactory(new DecoderFieldWritableFactory(),
                new DecoderMethodWritableFactory(new DecoderAttributeWritableFactory()),
                new DecoderAttributeWritableFactory(),
                new DecodedConstantPoolWritableFactory());
    }

    private final FieldWritableFactory<Writer> fieldWritableFactory;
    private final MethodWritableFactory<Writer> methodWritableFactory;
    private final AttributeWritableFactory<Writer> classAttributeWritableFactory;
    private final ConstantPoolWritableFactory<Writer> constantPoolWritableFactory;

    public DecoderClassWritableFactory(FieldWritableFactory<Writer> fieldWritableFactory,
                                       MethodWritableFactory<Writer> methodWritableFactory,
                                       AttributeWritableFactory<Writer> classAttributeWritableFactory,
                                       ConstantPoolWritableFactory<Writer> constantPoolWritableFactory) {
        this.fieldWritableFactory = fieldWritableFactory;
        this.methodWritableFactory = methodWritableFactory;
        this.classAttributeWritableFactory = classAttributeWritableFactory;
        this.constantPoolWritableFactory = constantPoolWritableFactory;
    }

    @Override
    public Writable<Writer> classFile(Header header, ConstantPool pool, int accessFlags,
                                      int thisIndex, int superIndex,
                                      EncodedInterfaces encodedInterfaces,
                                      EncodedFields encodedFields, EncodedMethods encodedMethods,
                                      EncodedAttributes encodedAttributes) {
        Writable<Writer> writableHeader = (Writable<Writer>) header.toWritable(this);
        Writable<Writer> writableInterfaces = (Writable<Writer>) encodedInterfaces.toWritable(this);
        Writable<Writer> writableFields = (Writable<Writer>) encodedFields
                .toWritable(this.fieldWritableFactory);
        Writable<Writer> writableMethods = (Writable<Writer>) encodedMethods
                .toWritable(this.methodWritableFactory);
        Writable<Writer> writableAttributes = (Writable<Writer>) encodedAttributes
                .toWritable(this.classAttributeWritableFactory);
        final Decoded writablePool = (Decoded) pool.toWritable(this.constantPoolWritableFactory);
        return new DecodedClassFile(writableHeader, writablePool, accessFlags, thisIndex,
                superIndex, writableInterfaces, writableFields, writableMethods,
                writableAttributes);
    }

    @Override
    public Writable<Writer> header(int minorVersion, int majorVersion) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> interfaces(List<Integer> encodedInterfaces) {
        throw new IllegalStateException();
    }
}
