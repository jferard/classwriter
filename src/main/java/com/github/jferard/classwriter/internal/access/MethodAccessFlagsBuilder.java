/*
 * ClassWriter - A minimal Java bytecode writer. Creates classes, methods, interfaces...
 *     Copyright (C) 2018 J. Férard <https://github.com/jferard>
 *
 * This file is part of ClassWriter.
 *
 * ClassWriter is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ClassWriter is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.github.jferard.classwriter.internal.access;

/**
 * Table 4.6-A. Method access and property flags
 */
public class MethodAccessFlagsBuilder {
    private int accessFlags;

    /**
     * Declared public; may be accessed from outside its package.
     */
    public MethodAccessFlagsBuilder publicFlag() {
        this.accessFlags |= MethodAccess.ACC_PUBLIC;
        return this;
    }

    /**
     * Declared private; accessible only within the defining class.
     */
    public MethodAccessFlagsBuilder privateFlag() {
        this.accessFlags |= MethodAccess.ACC_PRIVATE;
        return this;
    }

    /**
     * Declared protected; may be accessed within subclasses.
     */
    public MethodAccessFlagsBuilder protectedFlag() {
        this.accessFlags |= MethodAccess.ACC_PROTECTED;
        return this;
    }

    /**
     * Declared static.
     */
    public MethodAccessFlagsBuilder staticFlag() {
        this.accessFlags |= MethodAccess.ACC_STATIC;
        return this;
    }

    /**
     * Declared final; must not be overridden (§5.4.5).
     */
    public MethodAccessFlagsBuilder finalFlag() {
        this.accessFlags |= MethodAccess.ACC_FINAL;
        return this;
    }

    /**
     * Declared synchronized; invocation is wrapped by a monitor use.
     */
    public MethodAccessFlagsBuilder synchronizedFlag() {
        this.accessFlags |= MethodAccess.ACC_SYNCHRONIZED;
        return this;
    }

    /**
     * A bridge method, generated by the compiler.
     */
    public MethodAccessFlagsBuilder bridgeFlag() {
        this.accessFlags |= MethodAccess.ACC_BRIDGE;
        return this;
    }

    /**
     * Declared with variable number of arguments.
     */
    public MethodAccessFlagsBuilder varargsFlag() {
        this.accessFlags |= MethodAccess.ACC_VARARGS;
        return this;
    }

    /**
     * Declared native; implemented in a language other than Java.
     */
    public MethodAccessFlagsBuilder nativeFlag() {
        this.accessFlags |= MethodAccess.ACC_NATIVE;
        return this;
    }

    /**
     * Declared abstract; no implementation is provided.
     */
    public MethodAccessFlagsBuilder abstractFlag() {
        this.accessFlags |= MethodAccess.ACC_ABSTRACT;
        return this;
    }

    /**
     * Declared strictfp; floating-point mode is FP-strict.
     */
    public MethodAccessFlagsBuilder strictFlag() {
        this.accessFlags |= MethodAccess.ACC_STRICT;
        return this;
    }

    /**
     * Declared synthetic; not present in the source code.
     */
    public MethodAccessFlagsBuilder syntheticFlag() {
        this.accessFlags |= MethodAccess.ACC_SYNTHETIC;
        return this;
    }

    public int build() {
        return this.accessFlags;
    }
}
