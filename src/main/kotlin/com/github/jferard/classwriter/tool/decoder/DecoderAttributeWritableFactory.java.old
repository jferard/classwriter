/*
 * ClassWriter - A minimal Java bytecode writer. Creates classes, methods, interfaces...
 *     Copyright (C) 2018 J. FÃ©rard <https://github.com/jferard>
 *
 * This file is part of ClassWriter.
 *
 * ClassWriter is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ClassWriter is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.github.jferard.classwriter.api;

import com.github.jferard.classwriter.Writable;
import com.github.jferard.classwriter.internal.attribute.PositionAndLineNumber;
import com.github.jferard.classwriter.encoded.attribute.EncodedAnnotation;
import com.github.jferard.classwriter.encoded.attribute.EncodedAttribute;
import com.github.jferard.classwriter.encoded.attribute.EncodedExceptionInCode;
import com.github.jferard.classwriter.encoded.attribute.EncodedInnerClass;
import com.github.jferard.classwriter.encoded.attribute.EncodedLocalVariableTable;
import com.github.jferard.classwriter.encoded.attribute.EncodedLocalVariableTypeTable;
import com.github.jferard.classwriter.encoded.instruction.EncodedInstruction;
import com.github.jferard.classwriter.encoded.stackmap.EncodedStackMapFrame;

import java.io.Writer;
import java.util.List;

public class DecoderAttributeWritableFactory implements AttributeWritableFactory<Writer> {
    @Override
    public Writable<Writer> codeAttribute(int attributeNameIndex, int maxStack, int maxLocals,
                                          int codeLength,
                                          EncodedInstruction encodedencodedInstruction,
                                          List<EncodedExceptionInCode> exceptions,
                                          int attributesLength, List<EncodedAttribute> attributes) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> constantDoubleValueAttribute(int attributeNameIndex, int valueIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> stackMapTableAttribute(int attributeNameIndex,
                                                   List<EncodedStackMapFrame> encodedStackMapFrames) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> constantFloatValueAttribute(int attributeNameIndex, int valueIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> constantIntegerValueAttribute(int attributeNameIndex, int valueIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> constantLongValueAttribute(int attributeNameIndex, int valueIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> constantStringValueAttribute(int attributeNameIndex, int valueIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> annotationAttribute(int annotationsNameIndex,
                                                List<EncodedAnnotation> encodedAnnotations) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> innerClassesAttribute(int attributeNameIndex,
                                                  List<EncodedInnerClass> encodedInnerClasses) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> innerClass(int innerClassIndex, int outerClassNameIndex,
                                       int innerClassNameIndex, int innerAccessFlags) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> lineNumberTableAttribute(int nameIndex,
                                                     List<PositionAndLineNumber> positionAndLineNumbers) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> positionAndLineNumber(int startPc, int lineNumber) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> variableTableAttribute(int attributeNameIndex,
                                                   List<EncodedLocalVariableTable> encodedLocalVariables) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> localVariableTable(int startPc, int length, int nameIndex,
                                               int descriptorIndex, int index) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> localVariableTypeTable(int startPc, int length, int nameIndex,
                                                   int signatureIndex, int index) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> variableTypeTableAttribute(int attributeNameIndex,
                                                       List<EncodedLocalVariableTypeTable> encodedLocalVariableTypes) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> deprecatedAttribute(int attributeNameIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> sourceFileAttribute(int attributeNameIndex, int sourceFileNameIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> syntheticAttribute(int attributeNameIndex) {
        throw new IllegalStateException();
    }

    @Override
    public Writable<Writer> encodedAttributes(List<? extends EncodedAttribute> encodedAttributes) {
        throw new IllegalStateException();
    }
}
